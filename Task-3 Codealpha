#include <iostream>
#include <vector>
using namespace std;
const int SIZE = 9;
void printGrid(const vector<std::vector<int>>& grid) {
    for (int i = 0; i < SIZE; ++i) {
        for (int j = 0; j < SIZE; ++j) {
            std::cout << grid[i][j] << " ";
        }
        std::cout << std::endl;
    }
}
bool isSafe(const std::vector<std::vector<int>>& grid, int row, int col, int num) {
    for (int x = 0; x < SIZE; ++x) {
        if (grid[row][x] == num || grid[x][col] == num) {
            return false;
        }
    }
int startRow = row - row % 3;
    int startCol = col - col % 3;
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (grid[i + startRow][j + startCol] == num) {
                return false;
            }
        }
    }
    return true;
}
bool findEmptyPosition(const vector<std::vector<int>>& grid, int& row, int& col) {
    for (row = 0; row < SIZE; ++row) {
        for (col = 0; col < SIZE; ++col) {
            if (grid[row][col] == 0) {
                return true;
            }
        }
    }
    return false;
}
bool solveSudoku(vector<std::vector<int>>& grid) {
    int row, col;
    if (!findEmptyPosition(grid, row, col)) {
        return true;  
    }
    for (int num = 1; num <= SIZE; ++num) {
        if (isSafe(grid, row, col, num)) {
            grid[row][col] = num;
            if (solveSudoku(grid)) {
                return true;
            }
            grid[row][col] = 0;
        }
    }
    return false;  
}
int main() {
    vector<std::vector<int>> sudokuGrid = {
    {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };
       cout << "\t\t\t<================================================================================>";
    cout << "\t\t\t  |          WELCOME TO SUDOKU GAME!         |   "<<endl ;
    cout<< "    | Fill in the missing numbers(represented by 0)to solve the puzzle |"<<endl; cout<<"<================================================================================>"<<endl;
    printGrid(sudokuGrid);
if (solveSudoku(sudokuGrid)) {
        cout << "\nSudoku Solution:\n";
        printGrid(sudokuGrid);
    } else {
        cout << "\nNo solution exists.\n";
    }
    return 0;
}
